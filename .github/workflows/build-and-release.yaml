name: Cross-Platform Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux
            build_command: make
            setup: sudo apt-get update && sudo apt-get install -y build-essential
          - os: windows-latest
            artifact_name: windows
            build_command: mingw32-make
            setup: |
              choco install mingw make
              mkdir -p build/release

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up build environment
        run: ${{ matrix.setup }}
        shell: bash

      - name: Create build directories
        run: mkdir -p build/release
        shell: bash

      - name: List source files (Debug)
        run: |
          pwd
          ls -la
          find . -name "*.c"
        shell: bash

      - name: Build project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mingw32-make SHELL=cmd.exe
        shell: cmd

      - name: Build project (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: make
        shell: bash

      - name: Archive build artifacts (Unix-like)
        if: matrix.os != 'windows-latest'
        run: tar -czvf release-${{ matrix.artifact_name }}.tar.gz ./build/release/
        shell: bash

      - name: Archive build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a -tzip release-${{ matrix.artifact_name }}.zip ./build/release/
        shell: cmd

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-artifact
          path: release-${{ matrix.artifact_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}

  release:
    permissions: write-all
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*-artifact/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
